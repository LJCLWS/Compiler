表达式文法：
(6.5.1)primary-expression:
		identifier
        constant
        string-literal
        ( expression )

(6.5.2)postfix-expression:
        primary-expression{[ expression ]}
		primary-expression{( argument-expression-list_opt )}
		primary-expression{. identifier}
		primary-expression{-> identifier}
		primary-expression{++}
		primary-expression{--}
		primary-expression{-> identifier}

		( type-name ) { initializer-list }  {[ expression ]}
		( type-name ) { initializer-list }  {( expression_opt )}
		( type-name ) { initializer-list }  {. identifier}
		( type-name ) { initializer-list }  {-> identifier}
		( type-name ) { initializer-list }  {++}
		( type-name ) { initializer-list }  {--}
		( type-name ) { initializer-list }  {-> identifier}

		( type-name ) { initializer-list ,}  {[ expression ]}
		( type-name ) { initializer-list ,}  {( expression_opt )}
		( type-name ) { initializer-list ,}  {. identifier}
		( type-name ) { initializer-list ,}  {-> identifier}
		( type-name ) { initializer-list ,}  {++}
		( type-name ) { initializer-list ,}  {--}
		( type-name ) { initializer-list ,}  {-> identifier}

(6.5.2) argument-expression-list:
		assignment-expression{, assignment-expression}
		
(6.5.3) unary-expression:
		postfix-expression
		++ unary-expression
		-- unary-expression
		unary-operator cast-expression
		sizeof unary-expression
		sizeof ( type-name )

(6.5.3) unary-operator: one of
		& * + - ~ !

(6.5.4) cast-expression:
		

(6.5.5) multiplicative-expression:

        postfix-expression{ * cast-expression}
		++ unary-expression{ * cast-expression}
		-- unary-expression{ * cast-expression}
		unary-operator cast-expression{ * cast-expression}
		sizeof unary-expression{ * cast-expression}
		sizeof ( type-name ){ * cast-expression}

		( type-name ) cast-expression{ * cast-expression}
		unary-expression{ / cast-expression}
		( type-name ) cast-expression{ / cast-expression}
		unary-expression{ % cast-expression}
		( type-name ) cast-expression{ % cast-expression}

(6.5.6) additive-expression:
		multiplicative-expression{+ multiplicative-expression}
	    multiplicative-expression{- multiplicative-expression}

(6.5.7) shift-expression:
		additive-expression{<< additive-expression}
		additive-expression{>> additive-expression}

(6.5.8) relational-expression:
		shift-expression{< shift-expression}
	    shift-expression{> shift-expression}
		shift-expression{<= shift-expression}
		shift-expression{<= shift-expression}

(6.5.9) equality-expression:

(6.5.10) AND-expression:
		
		
(6.5.11) exclusive-OR-expression:
		additive-expression{<< additive-expression}{< shift-expression}{== relational-expression}{& equality-expression}{^ AND-expression}
		additive-expression{>> additive-expression}{< shift-expression}{== relational-expression}{& equality-expression}{^ AND-expression}
	    additive-expression{<< additive-expression}{> shift-expression}{== relational-expression}{& equality-expression}{^ AND-expression}
		additive-expression{>> additive-expression}{> shift-expression}{== relational-expression}{& equality-expression}{^ AND-expression}
		additive-expression{<< additive-expression}{<= shift-expression}{== relational-expression}{& equality-expression}{^ AND-expression}
		additive-expression{>> additive-expression}{<= shift-expression}{== relational-expression}{& equality-expression}{^ AND-expression}
		additive-expression{<< additive-expression}{<= shift-expression}{== relational-expression}{& equality-expression}{^ AND-expression}
		additive-expression{>> additive-expression}{<= shift-expression}{== relational-expression}{& equality-expression}{^ AND-expression}

		additive-expression{<< additive-expression}{< shift-expression}{!= relational-expression}{& equality-expression}{^ AND-expression}
		additive-expression{>> additive-expression}{< shift-expression}{!= relational-expression}{& equality-expression}{^ AND-expression}
	    additive-expression{<< additive-expression}{> shift-expression}{!= relational-expression}{& equality-expression}{^ AND-expression}
		additive-expression{>> additive-expression}{> shift-expression}{!= relational-expression}{& equality-expression}{^ AND-expression}
		additive-expression{<< additive-expression}{<= shift-expression}{!= relational-expression}{& equality-expression}{^ AND-expression}
		additive-expression{>> additive-expression}{<= shift-expression}{!= relational-expression}{& equality-expression}{^ AND-expression}
		additive-expression{<< additive-expression}{<= shift-expression}{!= relational-expression}{& equality-expression}{^ AND-expression}
		additive-expression{>> additive-expression}{<= shift-expression}{!= relational-expression}{& equality-expression}{^ AND-expression}
		
(6.5.12) inclusive-OR-expression:
		
		
(6.5.13) logical-AND-expression:
		
		
(6.5.14) logical-OR-expression:
		
		
(6.5.15) conditional-expression:
		
		
(6.5.16) assignment-expression:
		exclusive-OR-expression{| exclusive-OR-expression}{&& inclusive-OR-expression}{|| logical-AND-expression}
		exclusive-OR-expression{| exclusive-OR-expression}{&& inclusive-OR-expression}{|| logical-AND-expression} ? expression : conditional-expression

		primary-expression{[ expression ]} assignment-operator assignment-expression
		primary-expression{( argument-expression-list_opt )} assignment-operator assignment-expression
		primary-expression{. identifier} assignment-operator assignment-expression
		primary-expression{-> identifier} assignment-operator assignment-expression
		primary-expression{++} assignment-operator assignment-expression
		primary-expression{--} assignment-operator assignment-expression
		primary-expression{-> identifier} assignment-operator assignment-expression

		( type-name ) { initializer-list }  {[ expression ]} assignment-operator assignment-expression
		( type-name ) { initializer-list }  {( expression_opt )} assignment-operator assignment-expression
		( type-name ) { initializer-list }  {. identifier} assignment-operator assignment-expression
		( type-name ) { initializer-list }  {-> identifier} assignment-operator assignment-expression
		( type-name ) { initializer-list }  {++} assignment-operator assignment-expression
		( type-name ) { initializer-list }  {--} assignment-operator assignment-expression
		( type-name ) { initializer-list }  {-> identifier} assignment-operator assignment-expression

		( type-name ) { initializer-list ,}  {[ expression ]} assignment-operator assignment-expression
		( type-name ) { initializer-list ,}  {( expression_opt )} assignment-operator assignment-expression
		( type-name ) { initializer-list ,}  {. identifier} assignment-operator assignment-expression
		( type-name ) { initializer-list ,}  {-> identifier} assignment-operator assignment-expression
		( type-name ) { initializer-list ,}  {++} assignment-operator assignment-expression
		( type-name ) { initializer-list ,}  {--} assignment-operator assignment-expression
		( type-name ) { initializer-list ,}  {-> identifier} assignment-operator assignment-expression

		++ unary-expression assignment-operator assignment-expression
		-- unary-expression assignment-operator assignment-expression
		unary-operator cast-expression assignment-operator assignment-expression
		sizeof unary-expression assignment-operator assignment-expression
		sizeof ( type-name ) assignment-operator assignment-expression

(6.5.16) assignment-operator: one of
		= *= /= %= += -= <<= >>= &= ^= |=

(6.5.17) expression:
		assignment-expression{, assignment-expression}

(6.6) constant-expression:
		conditional-expression